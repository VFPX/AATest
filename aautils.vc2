*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="aautils.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS cstglobal AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: hidesystemtoolbars		&& Hides all system toolbars
		*m: restoresystemtoolbars
		*m: selapplication		&& Allows to select the different windows applciations to test
		*p: nsystemtoolbars		&& The system toolbar count
		*a: asystoolbars[12,2]		&& System toolbars array
	*</DefinedPropArrayMethod>

	Name = "cstglobal"
	nsystemtoolbars = 13		&& The system toolbar count
	
	PROCEDURE Destroy
		This.restoresystemtoolbars
	ENDPROC

	PROCEDURE hidesystemtoolbars		&& Hides all system toolbars
		WITH This
		
			LOCAL iIndex
		
			DIMENSION .aSysToolbars[.nSystemToolbars,2]
		
			.aSysToolbars[1,1] = "Form Designer"
			.aSysToolbars[2,1] = "Standard"
			.aSysToolbars[3,1] = "Layout"
			.aSysToolbars[4,1] = "Query Designer"
			.aSysToolbars[5,1] = "View Designer"
			.aSysToolbars[6,1] = "Color Palette"
			.aSysToolbars[7,1] = "Form Controls"
			.aSysToolbars[8,1] = "Database Designer"
			.aSysToolbars[9,1] = "Report Designer"
			.aSysToolbars[10,1] = "Report Controls"
			.aSysToolbars[11,1] = "Print Preview"
			.aSysToolbars[12,1] = "Debugger"
			.aSysToolbars[13,1] = "Command"
		
			FOR iIndex = 1 TO .nSystemToolbars
		
			   IF WEXIST(.aSysToolbars[iIndex,1]) AND ;
			      WVISIBLE(.aSysToolbars[iIndex,1]) 
			      .aSysToolbars[iIndex,2] = .t.
			      HIDE WINDOW (.aSysToolbars[iIndex,1])
			   ELSE
		   	      .aSysToolbars[iIndex,2] = .f.
			   ENDIF
		
			ENDFOR
		
		ENDWITH
	ENDPROC

	PROCEDURE Init
		This.HideSystemToolbars
	ENDPROC

	PROCEDURE restoresystemtoolbars
		WITH This
		
			LOCAL iIndex
		
			FOR iIndex = 1 TO .nSystemToolbars
		
			   IF .aSysToolbars[iIndex,2] AND ;
			   	  WEXIST(.aSysToolbars[iIndex,1])
			      SHOW WINDOW (.aSysToolbars[iIndex,1])
			   ENDIF
		
			ENDFOR
		
		ENDWITH
	ENDPROC

	PROCEDURE selapplication		&& Allows to select the different windows applciations to test
		LPARAMETERS nExcludeWHnd
		
		IF PCOUNT() < 1
			nExcludeWHnd = 0
		ENDIF
		
		LOCAL lc_instName
		
		CREATE CURSOR ac_temp (handle N(20), winname C(50))
		
		DECLARE INTEGER FindWindowEx IN WIN32API ;
		        INTEGER hwndParent, ;
		        INTEGER hwndChildAfter, ;
		        STRING  ipszClass, ;
		        STRING  ipszWindow
		
		DECLARE INTEGER GetWindow IN user32.dll  ;
		        INTEGER hWnd, ;
		        INTEGER wCmd
		
		DECLARE INTEGER GetWindowText IN user32.dll  ;
		        INTEGER hWnd, ;
		        STRING iTitleStr, ;
		        INTEGER nLength
		
		DECLARE INTEGER IsWindowVisible IN user32.dll  ;
		        INTEGER hWnd
		
		lc_instname = _screen.caption
		
		ln_aplhand = FindWindowEx(0, ;
		             0, ;
		             0, ;
		             @lc_instname)
		
		*-- get the first window
		ln_whnd = GetWindow(ln_aplhand, 0)
		cWName = REPL(CHR(0), 100)
		
		DO WHILE ln_whnd <> 0
			cWName = REPL(CHR(0), 100)
			GetWindowText(ln_whnd, @cWName,100)
			
			cWName = LEFT(cWName, AT(CHR(0), cWName) - 1)
		
			IF NOT EMPTY(cWName) AND ;					&& 
				IsWindowVisible(ln_whnd) <> 0 AND ;		&& omit invisible windows
				cWName <> "Program Manager" AND ;		&& omit prog manager
				NOT INLIST(ln_wHnd, nExcludeWHnd, _SCREEN.HWnd, _VFP.HWnd)	&& omit current form and instance
				INSERT INTO ac_temp VALUES (ln_whnd, cWName)
			ENDIF
		
			ln_whnd= GetWindow(ln_whnd, 2)
			
		ENDDO
		
		LOCATE FOR ATC("fox", winname) # 0 OR ATC("vfp", winname) # 0
		
		IF NOT FOUND()
			GO TOP
		ENDIF
		
		ohWnd = NEWOBJECT("custom")
		ohWnd.AddProperty("nhWndSelected", 0)
		
		ofrmSelApp = NEWOBJECT('frmselapplication','aautils', "", ohWnd)
		ofrmSelApp.Show()
		
		nReturn = ohwnd.nhWndSelected
		ohWnd = Null
		ofrmSelApp = Null
		
		USE IN ac_temp
		
		RETURN nReturn
	ENDPROC

ENDDEFINE

DEFINE CLASS frmselapplication AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lstwinname" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdSelect" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdVFP" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: ohwnd		&& The object which carries the hWnd of selected window
	*</DefinedPropArrayMethod>

	AlwaysOnTop = .T.
	AutoCenter = .T.
	BorderStyle = 3
	Caption = "Choose VFP Application/Window"
	Desktop = .T.
	DoCreate = .T.
	Height = 287
	MaxButton = .F.
	MinButton = .F.
	Name = "frmselapplication"
	ohwnd = 		&& The object which carries the hWnd of selected window
	Width = 397
	WindowType = 1

	ADD OBJECT 'cmdCancel' AS commandbutton WITH ;
		Cancel = .T., ;
		Caption = "\<Cancel", ;
		FontName = "Tahoma", ;
		Height = 25, ;
		Left = 282, ;
		Name = "cmdCancel", ;
		TabIndex = 3, ;
		Top = 252, ;
		Width = 68
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdSelect' AS commandbutton WITH ;
		Caption = "\<Select", ;
		Default = .T., ;
		FontName = "Tahoma", ;
		Height = 25, ;
		Left = 212, ;
		Name = "cmdSelect", ;
		TabIndex = 2, ;
		Top = 252, ;
		Width = 68
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdVFP' AS commandbutton WITH ;
		Caption = "", ;
		FontName = "Tahoma", ;
		Height = 25, ;
		Left = 357, ;
		Name = "cmdVFP", ;
		Picture = fox.bmp, ;
		TabIndex = 4, ;
		Top = 252, ;
		Width = 29
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'lstwinname' AS listbox WITH ;
		BoundColumn = 2, ;
		ColumnCount = 2, ;
		ColumnWidths = "370,0", ;
		FirstElement = 1, ;
		FontName = "Tahoma", ;
		Height = 228, ;
		Left = 12, ;
		Name = "lstwinname", ;
		NumberOfElements = 0, ;
		RowSource = "winname,handle", ;
		RowSourceType = 6, ;
		TabIndex = 1, ;
		Top = 12, ;
		Width = 373
		*< END OBJECT: BaseClass="listbox" />
	
	PROCEDURE Init
		PARAMETERS ohWnd
		
		IF TYPE("oHwnd.BaseClass") = "C"
			Thisform.oHwnd = ohWnd
		ELSE
			WAIT WINDOW "Wrong parameter!!!"
			RETURN .f.
		ENDIF
		
		IF USED("ac_temp")
			SELECT ac_temp
		ELSE
			RETURN .f.
		ENDIF
		
		This.lstwinname.Value = STR(handle)
	ENDPROC

	PROCEDURE cmdCancel.Click
		Thisform.Release
		
	ENDPROC

	PROCEDURE cmdSelect.Click
		IF TYPE("Thisform.lstwinname.Value") = "C"
			Thisform.oHwnd.nhWndSelected = VAL(Thisform.lstwinname.Value)
		ELSE
			Thisform.oHwnd.nhWndSelected = Thisform.lstwinname.Value
		ENDIF
		
		Thisform.cmdCancel.Click
		
	ENDPROC

	PROCEDURE cmdVFP.Click
		LOCAL oExternalVFP
		
		oExternalVFP = CREATEOBJECT("visualfoxpro.application")
		oExternalVFP.Visible=.T.
		
		*-- Reselect the foreground window
		SetForegroundWindow(_screen.hwnd)
		
		*-- If the VFP doesn't support MSAA(may be VFP6)
		IF TYPE("oExternalVFP.hWnd") <> "U"
			Thisform.oHwnd.nhWndSelected = oExternalVFP.hWnd
		ENDIF
		
		Thisform.cmdCancel.Click
		
		RETURN
	ENDPROC

	PROCEDURE lstwinname.DblClick
		Thisform.cmdSelect.Click
	ENDPROC

ENDDEFINE

DEFINE CLASS tbraatest AS toolbar 
 	*< CLASSDATA: Baseclass="toolbar" Timestamp="" Scale="Pixels" Uniqueid="" />

	Caption = "Toolbar1"
	Height = 19
	Left = 0
	Name = "testtbar"
	Top = -1
	Width = 33

ENDDEFINE
